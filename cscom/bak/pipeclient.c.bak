#define _XOPEN_SOURCE 500
#include "model.h"
#include<ftw.h>
#include<sys/stat.h>
#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<limits.h>
#define FILEOPEN 1024
#define FIFO_NAME "./data"
#define BUFFER_SIZE PIPE_BUF
    
int getMetadata(const char *dirpath, const struct stat *sb,int typeflag, struct FTW *ftwbuf); 

int gb_filecount;//The file counts
int pipe_fd;
int main (int argc, char *argv[]) {
        struct stat pathbuf;
	int ret, i, j;
	pid_t pid;
	int open_mode = O_WRONLY;

	if(argc < 2){   
    		printf("please input e:./pipeclient ./proc... /n ");
    		return -1;
	}
	
	for(i = 1; i < argc; i++){
		//根据argv[i]中指定的目录
  		if(lstat(argv[i],&pathbuf)){   
    			printf("invalid dirpath:%s/n",argv[i]);   
    			return -1;   
  		}else{   
    			if(0 == S_ISDIR(pathbuf.st_mode)){   
      				printf("%s is not dirpath/n",argv[i]);   
      				return -1;   
    			}		   
  		}	   
	}
	
	if (access(FIFO_NAME, F_OK) == -1) {
		ret = mkfifo(FIFO_NAME, 0777);
		if(ret != 0){
			fprintf(stderr, "Could not create fifo %s\n", FIFO_NAME);
		exit(-1);
		}
	}	

//	printf("make fifo success");
//	pipe_fd = open(FIFO_NAME, open_mode);
	
	for(j = 1; j < argc; j++){
		if ((pid = fork()) < 0)
		{
			printf("fork error");
			return -1;
		}
		else if (pid == 0)
		{printf("sdasd");
			ret = nftw(argv[j],getMetadata,FILEOPEN,FTW_PHYS);
   
    			if(ret<0){   
    				printf("[wrong:%d]ntfw search %d files/n",ret,gb_filecount);   
    				return -1;   
  			}else{   
    				printf("The nftw process is success!");   
    				return 0;   
  			}
		}	   
	
 	}
/*	if (write(requestfd, requestbuf, len) != len) {
       		perror("Client failed to write");
      		return 1;
	}
	close(requestfd);
*/
}

int getMetadata(const char *dirpath, const struct stat *sb,int typeflag, struct FTW *ftwbuf){   
  	//printf("num:%d path:%s ",++gb_filecount,dirpath);  
	//printf("FTW_base:%d FTW_level:%d /n",(*ftwbuf).base,(*ftwbuf).level);   
	char requestbuf[PIPE_BUF];
	printf("%s",dirpath);
	return 0;
} 
